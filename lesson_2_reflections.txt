8. What happens when you initialize a repository? Why do you need to do it?
   This adds a .git file, it this initializes the version control mechanisms.

9. How is the staging area different from the working directory and the repository? What value do you think it offers?
   It is an intermediate area. Help us group logically similar files and then commit them together.

10. How can you use the staging area to make sure you have one commit per logical change?
    It is an intermediate stage before finally committing code. Make sure no mistakes in code.

11. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    Branches would be useful if you want to take multiple paths in your code, which could be merged together at a later time.

12. How do the diagrams help you visualize the branch structure?
    It shows all the branches and diversions taken.

13. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
    Mergign two branches means including all features of one branch to the other, to for code with functionalities of both branches.

14. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
    Pros: Isolates conflicts. Cons: Might overlook non conflicting yet illogical errors.
